#include<iostream>
#include<vector>
using namespace std;
//该函数用于求解活动选择问题，参数s表示每个活动的开始时间，参数f表示每个活动的结束时间，参数p用于存储最大的互相兼容的活动组合
void Fun_activity(vector<int>& s, vector<int>& f, vector<int>& p)
{
    p.push_back(1);//将第一个活动加入最大的互相兼容的活动组合中
    int k = 1;//k表示当前已经加入最大的互相兼容的活动组合中的活动的结束时间最早的活动的编号
    for (int m = 2; m <= s.size() - 1; m++) //从第二个活动开始遍历
    {
        if (s[m] > f[k]) //如果当前活动的开始时间晚于已经加入最大的互相兼容的活动组合中的活动的结束时间最早的活动的结束时间
        {
            p.push_back(m);//将该活动加入最大的互相兼容的活动组合中
            k = m;//更新结束时间最早的活动的编号为当前活动的编号
        }
    }
    cout << "在所有的活动中，可以有一个活动集可供选择，这是一个最大的互相兼容的活动组合:" << endl;
    for (int m : p) //遍历最大的互相兼容的活动组合，输出其中每个活动的编号
    {
        cout << m << " ";
    }
}//贪心算法

int main()
{
    vector<int>s = { 0,1,3,0,5,3,5,6,8,8,2,12 };//该数组中，储存的是活动的开始时间
    vector<int>f = { 0,4,5,6,7,9,9,10,11,12,14,16 };//该数组中，储存的是与上一个数组相匹配的活动结束的时间
    vector<int>p;//用于存储最大的互相兼容的活动组合
    Fun_activity(s, f, p);//调用函数求解活动选择问题
    cout << endl;
}